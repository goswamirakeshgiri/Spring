package com.rg.app;

import java.util.ArrayList;
import java.util.List;

public class RadixTreeUtil {

	private RadixTreeNode root;

	public RadixTreeUtil() {
		root = new RadixTreeNode(' ');
	}


	public void create(String k, String v) {

		if (search(k) == true) {
			System.out.println("Key:" + k + "' already exists");
			return;
		}
		RadixTreeNode current = root;
		for (char ch : k.toCharArray()) {
			RadixTreeNode child = current.subNode(ch);
			if (child != null)
				current = child;
			else {
				current.childrens.add(new RadixTreeNode(ch));
				current = current.subNode(ch);
				current.value = v;
			}
			current.count++;
		}
		current.isEnd = true;

	}

	public boolean search(String k) {
		RadixTreeNode current = root;
		for (char ch : k.toCharArray()) {
			if (current.subNode(ch) == null)
				return false;
			else
				current = current.subNode(ch);
		}
		if (current.isEnd == true)
			return true;
		return false;
	}
	
	public List <RadixTreeNode>  getAll() {
		List <RadixTreeNode> listAll=new ArrayList<>();
		listAll.add(root);
		
		
	}
	
	public String getValue(String k) {
		RadixTreeNode current = root;
		String value = null;
		for (char ch : k.toCharArray()) {

			current = current.subNode(ch);
		}
		if (current.isEnd == true) {
			value = current.value;
		}

		return value;
	}

	public void delete(String k) {
		if (search(k) == false) {
			System.out.println("Key:" + k + "not found");
			return;
		}
		RadixTreeNode current = root;
		for (char ch : k.toCharArray()) {
			RadixTreeNode child = current.subNode(ch);
			if (child.count == 1) {
				current.childrens.remove(child);
				return;
			} else {
				child.count--;
				current = child;
			}
		}
		current.isEnd = false;
	}

	
	public void update(String k, String v) {

		RadixTreeNode current = root;

		for (char ch : k.toCharArray()) {

			current = current.subNode(ch);
		}
		if (current.isEnd == true) {
			current.value = v;
		}

	}

}
